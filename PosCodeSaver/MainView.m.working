//
//  ViewController.m
//  PosCodeSaver
//
//  Created by Ramesh on 03/10/2013.
//  Copyright (c) 2013 Ramesh. All rights reserved.
//

#import "MainView.h"
#import "AppDelegate.h"
#import <CoreData/CoreData.h>
#import "PostCodes.h"
#import "PostCodeNew.h"
#import "editPostCode.h"


@interface MainView ()

@end

@implementation MainView

//http://stackoverflow.com/questions/4471289/how-to-filter-nsfetchedresultscontroller-coredata-with-uisearchdisplaycontroll
//3.synenthesize the properties. assign the setters/getters for the declared views

//@synthesize tableView;
@synthesize searchBar;
@synthesize allData;
@synthesize searchResults;
@synthesize fetchedResultsController;
@synthesize searchFetchedResultsController;
@synthesize fillteredData;
@synthesize posCodeNew;
@synthesize editPosCodeVC;
@synthesize managedObjectContext;
//@synthesize isLoading;
//@synthesize searchTableView;
//
- (void)viewDidLoad
{
    [super viewDidLoad];
	// Do any additional setup after loading the view, typically from a nib.
    
    [self setTitle:@"All Addresses"];
    
    //getting singleton managedObjectContext
    AppDelegate *appDelegate = [[UIApplication sharedApplication] delegate];
    self.managedObjectContext = appDelegate.managedObjectContext;
    
    UIBarButtonItem *addBarItem = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemAdd target:self action:@selector(pushAddPostCodeViewController)];
    
    self.navigationItem.rightBarButtonItem=addBarItem;
    [addBarItem release];
    
    //tableviews
    
    self.tableView=[[UITableView alloc] initWithFrame:self.view.bounds
                         style:UITableViewStyleGrouped];
    [self.tableView setDelegate:self];
    [self.tableView setDataSource:self];
    
    /* Make sure our table view resizes correctly */
    self.tableView.autoresizingMask = UIViewAutoresizingFlexibleWidth |
                                    UIViewAutoresizingFlexibleHeight;
    //[self.view addSubview:self.tableView];
    
    //datasource for tv
    
    self.allData= [[NSMutableArray alloc] init];
    self.fillteredData= [[NSMutableArray alloc] init];
    self.searchResults=[[NSMutableArray alloc] init];
    
    
    //UISearchBar implementation
    
    self.searchBar= [[UISearchBar alloc]
                    initWithFrame:CGRectMake(0, 0, self.tableView.frame.size.width, 0)];
    
    //self.searchBar= [[UISearchBar alloc]init];
    self.searchBar.delegate=self;
    [self.searchBar sizeToFit];
    self.tableView.tableHeaderView=self.searchBar;
    [self.tableView reloadData];
    
    //[self.view addSubview:self.searchBar];
    
    UISearchDisplayController  *searchDisplayController= [[UISearchDisplayController alloc] initWithSearchBar:self.searchBar contentsController:self];
    searchDisplayController.delegate=self;
    searchDisplayController.searchResultsDelegate=self;
    searchDisplayController.searchResultsDataSource=self;
    self.tableView.tableHeaderView=self.searchBar;
    
    //[self setUpDatabaseQueryEngine];
    
    self.posCodeNew= [[PostCodeNew alloc] initWithNibName:nil bundle:nil];
    self.editPosCodeVC= [[editPostCode alloc] initWithNibName:nil bundle:nil];
    
}


//I created a helpful method to retrieve the correct FRC when working with all of the UITableViewDelegate/DataSource methods:

- (NSFetchedResultsController *)fetchedResultsControllerForTableView:(UITableView *)tableView
{
    return tableView == self.tableView ? self.fetchedResultsController : self.searchFetchedResultsController;
}

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    NSInteger count = [[[self fetchedResultsControllerForTableView:tableView] sections] count];
    return count;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    NSInteger numberOfRows = 0;
    NSFetchedResultsController *fetchController = [self fetchedResultsControllerForTableView:tableView];
    NSArray *sections = fetchController.sections;
    if(sections.count > 0)
    {
        id <NSFetchedResultsSectionInfo> sectionInfo = [sections objectAtIndex:section];
        numberOfRows = [sectionInfo numberOfObjects];
    }
    
    return numberOfRows;
    
}

- (void)fetchedResultsController:(NSFetchedResultsController *)fetchedResultsController configureCell:(UITableViewCell *)theCell atIndexPath:(NSIndexPath *)theIndexPath
{
    // your cell guts here
    PostCodes *postCode = (PostCodes*)[fetchedResultsController objectAtIndexPath:theIndexPath];
    
    theCell.textLabel.text=postCode.reference;
    //NSLog(@"PostCode:%@", postCode.postCode);
    theCell.detailTextLabel.text=postCode.postCode;
    theCell.accessoryType=UITableViewCellAccessoryDisclosureIndicator;

}


- (UITableViewCell *)tableView:(UITableView *)theTableView cellForRowAtIndexPath:(NSIndexPath *)theIndexPath
{
    
    static NSString *CellIdentifier = @"Cell";
    //NSLog(@"index.row:%d", indexPath.row)   ;
    UITableViewCell *cell = [self.tableView dequeueReusableCellWithIdentifier:CellIdentifier];
    
    if (cell == nil) {
        cell = [[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle
                                       reuseIdentifier:CellIdentifier] autorelease];
        [cell setSelectionStyle:UITableViewCellSelectionStyleNone];
        [cell setIndentationWidth:0.0];
    }

    [self fetchedResultsController:[self fetchedResultsControllerForTableView:theTableView] configureCell:cell atIndexPath:theIndexPath];
    
    return cell;
}


//Delegate methods for the search bar:

- (void)controllerWillChangeContent:(NSFetchedResultsController *)controller
{
    UITableView *tableView = controller == self.fetchedResultsController ? self.tableView : self.searchDisplayController.searchResultsTableView;
    [tableView beginUpdates];
}


- (void)controller:(NSFetchedResultsController *)controller
  didChangeSection:(id <NSFetchedResultsSectionInfo>)sectionInfo
           atIndex:(NSUInteger)sectionIndex
     forChangeType:(NSFetchedResultsChangeType)type
{
    
    
    UITableView *tableView = controller == self.fetchedResultsController ? self.tableView : self.searchDisplayController.searchResultsTableView;
    
    switch(type)
    {
        case NSFetchedResultsChangeInsert:
            [tableView insertSections:[NSIndexSet indexSetWithIndex:sectionIndex] withRowAnimation:UITableViewRowAnimationFade];
            break;
            
        case NSFetchedResultsChangeDelete:
            [tableView deleteSections:[NSIndexSet indexSetWithIndex:sectionIndex] withRowAnimation:UITableViewRowAnimationFade];
            break;
    }
}


- (void)controller:(NSFetchedResultsController *)controller
   didChangeObject:(id)anObject
       atIndexPath:(NSIndexPath *)theIndexPath
     forChangeType:(NSFetchedResultsChangeType)type
      newIndexPath:(NSIndexPath *)newIndexPath
{
    
    UITableView *tableView = controller == self.fetchedResultsController ? self.tableView : self.searchDisplayController.searchResultsTableView;
    
    switch(type)
    {
            
        case NSFetchedResultsChangeInsert:
            [tableView insertRowsAtIndexPaths:[NSArray arrayWithObject:newIndexPath] withRowAnimation:UITableViewRowAnimationFade];
            break;
            
        case NSFetchedResultsChangeDelete:
            [tableView deleteRowsAtIndexPaths:[NSArray arrayWithObject:theIndexPath] withRowAnimation:UITableViewRowAnimationFade];
            break;
            
        case NSFetchedResultsChangeUpdate:
            [self fetchedResultsController:controller configureCell:[tableView cellForRowAtIndexPath:theIndexPath] atIndexPath:theIndexPath];
            break;
            
        case NSFetchedResultsChangeMove:
            [tableView deleteRowsAtIndexPaths:[NSArray arrayWithObject:theIndexPath] withRowAnimation:UITableViewRowAnimationFade];
            [tableView insertRowsAtIndexPaths:[NSArray arrayWithObject:newIndexPath]withRowAnimation:UITableViewRowAnimationFade];
            break;
    }

}


- (void)controllerDidChangeContent:(NSFetchedResultsController *)controller
{
    UITableView *tableView = controller == self.fetchedResultsController ? self.tableView : self.searchDisplayController.searchResultsTableView;
    [tableView endUpdates];
}


//FRC Creating code

- (NSFetchedResultsController *)newFetchedResultsControllerWithSearch:(NSString *)searchString
{
    
    NSFetchRequest *fetchRequest= [[NSFetchRequest alloc] init];

    // NSSortDescriptor tells defines how to sort the fetched results
    NSSortDescriptor *sortDescriptor = [[NSSortDescriptor alloc] initWithKey:@"reference" ascending:YES];
    NSArray *sortDescriptors = [[NSArray alloc] initWithObjects:sortDescriptor, nil];
    [fetchRequest setSortDescriptors:sortDescriptors];
    
    /*
     Set up the fetched results controller.
     */
    // Create the fetch request for the entity.
    
    NSEntityDescription* entityDescription = [NSEntityDescription
                                              entityForName:@"PostCodes"
                                              inManagedObjectContext:self.managedObjectContext];
    [fetchRequest setEntity:entityDescription];
    [sortDescriptor release];
    [sortDescriptors release];
    
    NSPredicate *filterPredicate = [NSPredicate predicateWithValue:YES];

    
    
    NSMutableArray *predicateArray = [NSMutableArray array];
    if(searchString.length)
    {
        // your search predicate(s) are added to this array
        [predicateArray addObject:[NSPredicate predicateWithFormat:@"reference contains %@", searchString]];
         
         // finally add the filter predicate for this view
        if(filterPredicate)
        {
            filterPredicate = [NSCompoundPredicate andPredicateWithSubpredicates:[NSArray arrayWithObjects:filterPredicate, [NSCompoundPredicate orPredicateWithSubpredicates:predicateArray], nil]];
        }
        else
        {
            filterPredicate = [NSCompoundPredicate orPredicateWithSubpredicates:predicateArray];
        }
    }
    [fetchRequest setPredicate:filterPredicate];
    
    // Set the batch size to a suitable number.
    [fetchRequest setFetchBatchSize:20];
    
    [fetchRequest setSortDescriptors:sortDescriptors];
    
    // Edit the section name key path and cache name if appropriate.
    // nil for section name key path means "no sections".
    NSFetchedResultsController *aFetchedResultsController = [[NSFetchedResultsController alloc] initWithFetchRequest:fetchRequest
                                                                                                managedObjectContext:self.managedObjectContext
                                                                                                  sectionNameKeyPath:nil
                                                                                                           cacheName:nil];
    aFetchedResultsController.delegate = self;
    
    [fetchRequest release];
    
    NSError *error = nil;
    if (![aFetchedResultsController performFetch:&error])
    {
        /*
         Replace this implementation with code to handle the error appropriately.
         
         abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development. If it is not possible to recover from the error, display an alert panel that instructs the user to quit the application by pressing the Home button.
         */
        NSLog(@"Unresolved error %@, %@", error, [error userInfo]);
        abort();
    }
    
    return aFetchedResultsController;
}

- (NSFetchedResultsController *)fetchedResultsController
{
    if (fetchedResultsController != nil)
    {
        return fetchedResultsController;
    }
    fetchedResultsController = [self newFetchedResultsControllerWithSearch:nil];
    return [[fetchedResultsController retain] autorelease];
}

- (NSFetchedResultsController *)searchFetchedResultsController
{
    if (searchFetchedResultsController != nil)
    {
        return searchFetchedResultsController;
    }
    searchFetchedResultsController = [self newFetchedResultsControllerWithSearch:self.searchDisplayController.searchBar.text];
    return [[searchFetchedResultsController retain] autorelease];
}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

-(void)dealloc {
    [searchBar release], searchBar=nil;
    [allData dealloc];
    [super dealloc];
}

//Tableview - swipe to delete
-(BOOL) tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath  {
    return YES;
}


-(void) tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath {
    
    if (editingStyle == UITableViewCellEditingStyleDelete) {
        //NSLog(@"Delete btn pressed");
        //delete the row from the data store
        
        NSFetchedResultsController *aFetchedResultsController=[self fetchedResultsControllerForTableView:tableView];
        aFetchedResultsController.delegate=self;
        
        // Delete the object from the data source
        NSManagedObject *objToDelete = (NSManagedObject*)[aFetchedResultsController objectAtIndexPath:indexPath];
        
        //NSLog(@"object to deleted:%@", objToDelete);
        // NSManagedObject *selectedObject = (NSManagedObject *) [self.tableData objectAtIndex:indexPath.row];
        
        // [NSIndexPath indexPathForRow:i inSection:0]
        //        NSError *error;
        //
        //        [self.managedObjectContext deleteObject:selectedObject]
        //        [self.managedObjectContext save:&error];
        //
        //        //delete from an array
        //        [self.tableData removeObjectAtIndex:indexPath.row];
        //        [self.tableView deleteRowsAtIndexPaths:[NSArray arrayWithObject:indexPath] withRowAnimation:UITableViewRowAnimationFade];
        // Delete the object from the database
                
        [aFetchedResultsController.managedObjectContext deleteObject:objToDelete];

        //[self.managedObjectContext deleteObject:objToDelete];
        //        if (![self.managedObjectContext save:&error]) {
        //            NSLog(@"Error Saving: %@",[error description]);
        //        }
        
        // Save Changes
        //[self.fetchedResultsController.managedObjectContext save:&error];
        NSError *error = nil;
        //BOOL success = [aFetchedResultsController.managedObjectContext  save:&error];
        BOOL success = [self.fetchedResultsController.managedObjectContext save:&error];
        if (!success) {
            // do error handling here.
            NSLog(@"Error Saving: %@",[error description]);
        }
        
        //        if (tableView == self.searchDisplayController.searchResultsTableView ) {
        //
        //            [self.searchDisplayController.searchResultsTableView reloadData];
        //
        //            NSLog(@"This is search table view");
        //
        //        }
        //
        
        //        if (error) {
        //            NSLog(@"Error %@ with user info %@.", error, error.userInfo);
        //        }
        //        
    }
    
}


- (void)filterContentForSearchText:(NSString*)searchText scope:(NSInteger)scope
{
    // update the filter, in this case just blow away the FRC and let lazy evaluation create another with the relevant search info
    self.searchFetchedResultsController.delegate = nil;
    self.searchFetchedResultsController = nil;
    // if you care about the scope save off the index to be used by the serchFetchedResultsController
    //self.savedScopeButtonIndex = scope;
}


#pragma mark -
#pragma mark Search Bar
- (void)searchDisplayController:(UISearchDisplayController *)controller willUnloadSearchResultsTableView:(UITableView *)tableView;
{
    // search is done so get rid of the search FRC and reclaim memory
    self.searchFetchedResultsController.delegate = nil;
    self.searchFetchedResultsController = nil;
}

- (BOOL)searchDisplayController:(UISearchDisplayController *)controller shouldReloadTableForSearchString:(NSString *)searchString
{
    [self filterContentForSearchText:searchString
                               scope:[self.searchDisplayController.searchBar selectedScopeButtonIndex]];
    
    // Return YES to cause the search result table view to be reloaded.
    return YES;
}


- (BOOL)searchDisplayController:(UISearchDisplayController *)controller shouldReloadTableForSearchScope:(NSInteger)searchOption
{
    [self filterContentForSearchText:[self.searchDisplayController.searchBar text]
                               scope:[self.searchDisplayController.searchBar selectedScopeButtonIndex]];
    
    // Return YES to cause the search result table view to be reloaded.
    return YES;
}

-(void) pushAddPostCodeViewController {
    
    //self.posCodeNew.posCodArray=self.tableData;
    [self.navigationController pushViewController:self.posCodeNew animated:YES];

}

- (void)setEditing:(BOOL)editing animated:(BOOL)animated
{
    [super setEditing:editing animated:animated];
    [self.tableView setEditing:editing animated:animated];
}

@end
